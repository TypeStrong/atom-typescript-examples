{
  "name": "typescript-loader",
  "version": "1.1.1",
  "description": "TypeScript Webpack Loader",
  "main": "lib/index.js",
  "directories": {
    "example": "example"
  },
  "dependencies": {
    "bluebird": "^2.7.1",
    "loader-utils": "^0.2.6",
    "object-assign": "^2.0.0",
    "typescript": "^1.4.1"
  },
  "devDependencies": {},
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/andreypopp/typescript-loader"
  },
  "keywords": [
    "webpack",
    "loader",
    "webpack-loader",
    "typescript"
  ],
  "author": {
    "name": "Andrey Popp",
    "email": "me@andreypopp.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/andreypopp/typescript-loader/issues"
  },
  "homepage": "https://github.com/andreypopp/typescript-loader",
  "readme": "# TypeScript Webpack Loader\n\nTypeScript loader for Webpack.\n\n## Example Configuration\n\n**webpack.config.js**\n\n```javascript\nmodule.exports = {\n\n  // Currently we need to add '.ts' to resolve.extensions array.\n  resolve: {\n    extensions: ['', '.webpack.js', '.web.js', '.ts', '.js']\n  },\n\n  // Source maps support (or 'inline-source-map' also works)\n  devtool: 'source-map',\n\n  // Add loader for .ts files.\n  module: {\n    loaders: [\n      {\n        test: /\\.ts$/,\n        loader: 'typescript-loader'\n      }\n    ]\n  }\n};\n```\n\nAfter that, you would be able to write JSX in TypeScript!\n\n## Best Practices\n\n### Using with JSX-TypeScript compiler\n\nYou can use `typescript-loader` together with\n[jsx-typscript](https://github.com/fdecampredon/jsx-typescript) compiler which\nhas support for JSX syntax (used in React.js).\n\nFor that you need to install `jsx-typescript`:\n\n    % npm install jsx-typescript\n\nAnd specify `typescriptCompiler` loader option:\n\n```javascript\nmodule.exports = {\n\n  module: {\n    loaders: [\n      {\n        test: /\\.ts$/,\n        loader: 'typescript-loader?typescriptCompiler=jsx-typescript'\n      }\n    ]\n  }\n};\n```\n\n### External Modules\n\nThe most natural way to structure your code with TypeScript and webpack is to use [external modules](https://github.com/Microsoft/TypeScript/wiki/Modules#going-external), and these work as you would expect. \n\n```\nnpm install --save react\n```\n\n```typescript\nimport React = require('react');\n```\n\n### Internal Modules\n\nTypeScript Loader will work with [internal modules](https://github.com/Microsoft/TypeScript/wiki/Modules#multi-file-internal-modules) too, however acquiring a reference to modules declared this way requires some work using the `exports-loader`. This is required because webpack wraps every file in a closure and internal modules are meant to run in a global context.\n\n**foo.ts**\n```typescript\nmodule Foo {\n  export var bar = 42;\n}\n```\n\n**main.ts**\n```typescript\n/// <reference path=\"foo.ts\" />\nvar foo: typeof Foo = require('exports?Foo!./foo');\nconsole.log(foo.bar) // 42\n```\n",
  "readmeFilename": "README.md",
  "_id": "typescript-loader@1.1.1",
  "dist": {
    "shasum": "145e9ad2bb37f6acf33a288555cff675e97b1b3f"
  },
  "_from": "typescript-loader@",
  "_resolved": "https://registry.npmjs.org/typescript-loader/-/typescript-loader-1.1.1.tgz"
}
